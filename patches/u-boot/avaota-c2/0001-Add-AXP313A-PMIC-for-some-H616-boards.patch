From c0267b513d67b71829aa8b38205947e52822a2da Mon Sep 17 00:00:00 2001
From: BigfootACA <bigfoot@classfun.cn>
Date: Sun, 5 Nov 2023 07:39:46 +0800
Subject: [PATCH 1/4] Add AXP313A PMIC for some H616 boards

Original from Potato <nikko@faint.day>

Signed-off-by: BigfootACA <bigfoot@classfun.cn>
---
 arch/arm/mach-sunxi/pmic_bus.c          |  4 ++
 board/sunxi/board.c                     | 13 ++--
 drivers/power/Kconfig                   | 13 +++-
 drivers/power/Makefile                  |  1 +
 drivers/power/axp313a.c                 | 84 +++++++++++++++++++++++++
 drivers/power/regulator/axp_regulator.c | 27 ++++++++
 include/axp313a.h                       | 21 +++++++
 include/axp_pmic.h                      |  2 +
 8 files changed, 159 insertions(+), 6 deletions(-)
 create mode 100644 drivers/power/axp313a.c
 create mode 100644 include/axp313a.h

diff --git a/arch/arm/mach-sunxi/pmic_bus.c b/arch/arm/mach-sunxi/pmic_bus.c
index c0908406..19c31b19 100644
--- a/arch/arm/mach-sunxi/pmic_bus.c
+++ b/arch/arm/mach-sunxi/pmic_bus.c
@@ -23,6 +23,8 @@
 
 #define AXP305_I2C_ADDR			0x36
 
+#define AXP313A_I2C_ADDR		0x36
+
 #define AXP221_CHIP_ADDR		0x68
 
 #if CONFIG_IS_ENABLED(PMIC_AXP)
@@ -34,6 +36,8 @@ static int pmic_i2c_address(void)
 		return AXP152_I2C_ADDR;
 	if (IS_ENABLED(CONFIG_AXP305_POWER))
 		return AXP305_I2C_ADDR;
+	if (IS_ENABLED(CONFIG_AXP313A_POWER))
+		return AXP313A_I2C_ADDR;
 
 	/* Other AXP2xx and AXP8xx variants */
 	return AXP209_I2C_ADDR;
diff --git a/board/sunxi/board.c b/board/sunxi/board.c
index f321cd58..d31375dc 100644
--- a/board/sunxi/board.c
+++ b/board/sunxi/board.c
@@ -584,7 +584,8 @@ void sunxi_board_init(void)
 
 #if defined CONFIG_AXP152_POWER || defined CONFIG_AXP209_POWER || \
 	defined CONFIG_AXP221_POWER || defined CONFIG_AXP305_POWER || \
-	defined CONFIG_AXP809_POWER || defined CONFIG_AXP818_POWER
+	defined CONFIG_AXP809_POWER || defined CONFIG_AXP818_POWER || \
+	defined CONFIG_AXP313A_POWER
 	power_failed = axp_init();
 
 	if (IS_ENABLED(CONFIG_AXP_DISABLE_BOOT_ON_POWERON) && !power_failed) {
@@ -602,10 +603,13 @@ void sunxi_board_init(void)
 	power_failed |= axp_set_dcdc1(CONFIG_AXP_DCDC1_VOLT);
 #endif
 #if !defined(CONFIG_AXP305_POWER)
+#if !defined(CONFIG_AXP313A_POWER)
 	power_failed |= axp_set_dcdc2(CONFIG_AXP_DCDC2_VOLT);
+#endif
 	power_failed |= axp_set_dcdc3(CONFIG_AXP_DCDC3_VOLT);
 #endif
-#if !defined(CONFIG_AXP209_POWER) && !defined(CONFIG_AXP818_POWER)
+#if !defined(CONFIG_AXP209_POWER) && !defined(CONFIG_AXP818_POWER) && \
+    !defined(CONFIG_AXP313A_POWER)
 	power_failed |= axp_set_dcdc4(CONFIG_AXP_DCDC4_VOLT);
 #endif
 #if defined CONFIG_AXP221_POWER || defined CONFIG_AXP809_POWER || \
@@ -617,10 +621,11 @@ void sunxi_board_init(void)
 	defined CONFIG_AXP818_POWER
 	power_failed |= axp_set_aldo1(CONFIG_AXP_ALDO1_VOLT);
 #endif
-#if !defined(CONFIG_AXP305_POWER)
+#if !defined(CONFIG_AXP305_POWER) && !defined(CONFIG_AXP313A_POWER)
 	power_failed |= axp_set_aldo2(CONFIG_AXP_ALDO2_VOLT);
 #endif
-#if !defined(CONFIG_AXP152_POWER) && !defined(CONFIG_AXP305_POWER)
+#if !defined(CONFIG_AXP152_POWER) && !defined(CONFIG_AXP305_POWER) && \
+    !defined(CONFIG_AXP313A_POWER)
 	power_failed |= axp_set_aldo3(CONFIG_AXP_ALDO3_VOLT);
 #endif
 #ifdef CONFIG_AXP209_POWER
diff --git a/drivers/power/Kconfig b/drivers/power/Kconfig
index 7f3b990d..c1c3c870 100644
--- a/drivers/power/Kconfig
+++ b/drivers/power/Kconfig
@@ -101,6 +101,15 @@ config AXP305_POWER
 	Select this to enable support for the axp305 pmic found on most
 	H616 boards.
 
+config AXP313A_POWER
+	bool "axp313a pmic support"
+	depends on MACH_SUN50I_H616
+	select AXP_PMIC_BUS
+	select CMD_POWEROFF
+	---help---
+	Select this to enable support for the axp313a pmic found on
+	H616 boards.
+
 config AXP809_POWER
 	bool "axp809 pmic support"
 	depends on MACH_SUN9I
@@ -161,11 +170,11 @@ config AXP_DCDC2_VOLT
 
 config AXP_DCDC3_VOLT
 	int "axp pmic dcdc3 voltage"
-	depends on AXP152_POWER || AXP209_POWER || AXP221_POWER || AXP809_POWER || AXP818_POWER
+	depends on AXP152_POWER || AXP209_POWER || AXP221_POWER || AXP809_POWER || AXP818_POWER || AXP313A_POWER
 	default 900 if AXP809_POWER || AXP818_POWER
 	default 1500 if AXP152_POWER
 	default 1250 if AXP209_POWER
-	default 1100 if MACH_SUN8I_R40
+	default 1100 if MACH_SUN8I_R40 || AXP313A_POWER
 	default 1200 if MACH_SUN6I || MACH_SUN8I
 	---help---
 	Set the voltage (mV) to program the axp pmic dcdc3 at, set to 0 to
diff --git a/drivers/power/Makefile b/drivers/power/Makefile
index ba64b2c5..f851f4a9 100644
--- a/drivers/power/Makefile
+++ b/drivers/power/Makefile
@@ -12,6 +12,7 @@ obj-$(CONFIG_AXP152_POWER)	+= axp152.o
 obj-$(CONFIG_AXP209_POWER)	+= axp209.o
 obj-$(CONFIG_AXP221_POWER)	+= axp221.o
 obj-$(CONFIG_AXP305_POWER)	+= axp305.o
+obj-$(CONFIG_AXP313A_POWER)	+= axp313a.o
 obj-$(CONFIG_AXP809_POWER)	+= axp809.o
 obj-$(CONFIG_AXP818_POWER)	+= axp818.o
 obj-$(CONFIG_EXYNOS_TMU)	+= exynos-tmu.o
diff --git a/drivers/power/axp313a.c b/drivers/power/axp313a.c
new file mode 100644
index 00000000..4d6966a1
--- /dev/null
+++ b/drivers/power/axp313a.c
@@ -0,0 +1,84 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * AXP313a driver
+ *
+ * (C) Copyright 2020 Jernej Skrabec <jernej.skrabec@siol.net>
+ *
+ * Based on axp221.c
+ * (C) Copyright 2014 Hans de Goede <hdegoede@redhat.com>
+ * (C) Copyright 2013 Oliver Schinagl <oliver@schinagl.nl>
+ */
+
+#include <common.h>
+#include <command.h>
+#include <errno.h>
+#include <asm/arch/pmic_bus.h>
+#include <axp_pmic.h>
+
+#define AXP313A_DCDC4_1600MV_OFFSET 46
+
+static u8 axp313a_mvolt_to_cfg(int mvolt, int min, int max, int div)
+{
+	if (mvolt < min)
+		mvolt = min;
+	else if (mvolt > max)
+		mvolt = max;
+
+	return  (mvolt - min) / div;
+}
+
+#define AXP313A_DCDC3_1200MV_OFFSET 71
+int axp_set_dcdc3(unsigned int mvolt)
+{
+	int ret;
+	u8 cfg;
+
+	if (mvolt >= 1220)
+		cfg = AXP313A_DCDC3_1200MV_OFFSET +
+			axp313a_mvolt_to_cfg(mvolt, 1220, 1840, 20);
+	else
+		cfg = axp313a_mvolt_to_cfg(mvolt, 500, 1200, 10);
+
+	if (mvolt == 0)
+		return pmic_bus_clrbits(AXP313A_OUTPUT_CTRL1,
+					AXP313A_OUTPUT_CTRL1_DCDC3_EN);
+
+	ret = pmic_bus_write(AXP313A_DCDC3_VOLTAGE, cfg);
+	if (ret)
+		return ret;
+
+	return pmic_bus_setbits(AXP313A_OUTPUT_CTRL1,
+				0x1f);
+}
+
+int axp_init(void)
+{
+	u8 axp_chip_id;
+	int ret;
+
+	ret = pmic_bus_init();
+	if (ret)
+		return ret;
+
+	ret = pmic_bus_read(AXP313A_CHIP_VERSION, &axp_chip_id);
+	if (ret)
+		return ret;
+
+	if ((axp_chip_id & AXP313A_CHIP_VERSION_MASK) != 0x4b)
+		return -ENODEV;
+
+	return ret;
+}
+
+#ifndef CONFIG_PSCI_RESET
+int do_poweroff(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+	pmic_bus_write(AXP313A_SHUTDOWN, AXP313A_POWEROFF);
+
+	/* infinite loop during shutdown */
+	while (1) {}
+
+	/* not reached */
+	return 0;
+}
+#endif
diff --git a/drivers/power/regulator/axp_regulator.c b/drivers/power/regulator/axp_regulator.c
index 02f320ea..682c125f 100644
--- a/drivers/power/regulator/axp_regulator.c
+++ b/drivers/power/regulator/axp_regulator.c
@@ -268,12 +268,39 @@ static const struct axp_regulator_plat axp813_regulators[] = {
 	{ }
 };
 
+static const u16 axp313a_dcdc1_table[] = {
+	500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610,
+	620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730,
+	740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 
+	860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 
+	980, 990, 1000, 1010, 1020, 1030, 1040, 1050, 1060, 1070, 
+	1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 
+	1180, 1190, 1200, 1220, 1240, 1260, 1280, 1300, 1320, 1340, 
+	1360, 1380, 1400, 1420, 1440, 1460, 1480, 1500, 1520, 1540, 
+	1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 
+	2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400,
+};
+
+/* DCDC3's setting is deviating from the datasheet. The values
+ * here are taken from linux-6.5 which are taken from the
+ * BSP driver and have been confirmed by measurements.
+ */
+static const struct axp_regulator_plat axp313a_regulators[] = {
+	{ "dcdc1", 0x10, BIT(0), 0x13, 0x7f, .table = axp313a_dcdc1_table },
+	{ "dcdc2", 0x10, BIT(1), 0x14, 0x7f,  500, 1540,  10, 70 },
+	{ "dcdc3", 0x10, BIT(2), 0x15, 0x7f,  800, 1840,  10, 70 },
+	{ "aldo1", 0x10, BIT(3), 0x16, 0x1f,  500, 3500, 100, NA },
+	{ "dldo1", 0x10, BIT(4), 0x17, 0x1f,  500, 3500, 100, NA },
+	{ }
+};
+
 static const struct axp_regulator_plat *const axp_regulators[] = {
 	[AXP152_ID]	= axp152_regulators,
 	[AXP202_ID]	= axp20x_regulators,
 	[AXP209_ID]	= axp20x_regulators,
 	[AXP221_ID]	= axp22x_regulators,
 	[AXP223_ID]	= axp22x_regulators,
+	[AXP313A_ID]	= axp313a_regulators,
 	[AXP803_ID]	= axp803_regulators,
 	[AXP806_ID]	= axp806_regulators,
 	[AXP809_ID]	= axp809_regulators,
diff --git a/include/axp313a.h b/include/axp313a.h
new file mode 100644
index 00000000..1547504c
--- /dev/null
+++ b/include/axp313a.h
@@ -0,0 +1,21 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * (C) Copyright 2020 Jernej Skrabec <jernej.skrabec@siol.net>
+ */
+
+enum axp313a_reg {
+	AXP313A_CHIP_VERSION = 0x3,
+	AXP313A_OUTPUT_CTRL1 = 0x10,
+	AXP313A_DCDC3_VOLTAGE = 0x15,
+	AXP313A_SHUTDOWN = 0x1A,
+};
+
+#define AXP313A_CHIP_VERSION_MASK	0xcf
+
+#define AXP313A_OUTPUT_CTRL1_DCDC1_EN	(1 << 0)	// GPU
+#define AXP313A_OUTPUT_CTRL1_DCDC2_EN	(1 << 1)	// CPU
+#define AXP313A_OUTPUT_CTRL1_DCDC3_EN	(1 << 2)	// DRAM
+#define AXP313A_OUTPUT_CTRL1_ALDO1_EN	(1 << 3)	// could be 1v8 bus
+#define AXP313A_OUTPUT_CTRL1_DLDO1_EN	(1 << 4)	// could be 3v3 bus
+
+#define AXP313A_POWEROFF		(1 << 7)
diff --git a/include/axp_pmic.h b/include/axp_pmic.h
index 4ac64865..9b6d7d90 100644
--- a/include/axp_pmic.h
+++ b/include/axp_pmic.h
@@ -13,6 +13,7 @@
 #include <axp209.h>
 #include <axp221.h>
 #include <axp305.h>
+#include <axp313a.h>
 #include <axp809.h>
 #include <axp818.h>
 
@@ -32,6 +33,7 @@ enum {
 	AXP209_ID,
 	AXP221_ID,
 	AXP223_ID,
+	AXP313A_ID,
 	AXP803_ID,
 	AXP806_ID,
 	AXP809_ID,
-- 
2.34.1

